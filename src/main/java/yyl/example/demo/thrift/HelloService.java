/**
 * (这个类是使用命令: thrift-0.10.0.exe -r -gen java ./hello.thrift 自动生成的)
 *
 * Autogenerated by Thrift Compiler (0.10.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */
package yyl.example.demo.thrift;

@SuppressWarnings({ "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-09")
public class HelloService {

	public interface Iface {

		public java.lang.String hello(java.lang.String text) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void hello(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public java.lang.String hello(java.lang.String text) throws org.apache.thrift.TException {
			send_hello(text);
			return recv_hello();
		}

		public void send_hello(java.lang.String text) throws org.apache.thrift.TException {
			hello_args args = new hello_args();
			args.setText(text);
			sendBase("hello", args);
		}

		public java.lang.String recv_hello() throws org.apache.thrift.TException {
			hello_result result = new hello_result();
			receiveBase(result, "hello");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hello failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void hello(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			hello_call method_call = new hello_call(text, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class hello_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
			private java.lang.String text;

			public hello_call(java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
					org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.text = text;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hello", org.apache.thrift.protocol.TMessageType.CALL, 0));
				hello_args args = new hello_args();
				args.setText(text);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_hello();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("hello", new hello());
			return processMap;
		}

		public static class hello<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hello_args> {
			public hello() {
				super("hello");
			}

			public hello_args getEmptyArgsInstance() {
				return new hello_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public hello_result getResult(I iface, hello_args args) throws org.apache.thrift.TException {
				hello_result result = new hello_result();
				result.success = iface.hello(args.text);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("hello", new hello());
			return processMap;
		}

		public static class hello<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hello_args, java.lang.String> {
			public hello() {
				super("hello");
			}

			public hello_args getEmptyArgsInstance() {
				return new hello_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
					public void onComplete(java.lang.String o) {
						hello_result result = new hello_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						hello_result result = new hello_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, hello_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
					throws org.apache.thrift.TException {
				iface.hello(args.text, resultHandler);
			}
		}

	}

	public static class hello_args
			implements org.apache.thrift.TBase<hello_args, hello_args._Fields>, java.io.Serializable, Cloneable, Comparable<hello_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_args");

		private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text",
				org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hello_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hello_argsTupleSchemeFactory();

		public java.lang.String text; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TEXT((short) 1, "text");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TEXT
					return TEXT;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_args.class, metaDataMap);
		}

		public hello_args() {
		}

		public hello_args(java.lang.String text) {
			this();
			this.text = text;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public hello_args(hello_args other) {
			if (other.isSetText()) {
				this.text = other.text;
			}
		}

		public hello_args deepCopy() {
			return new hello_args(this);
		}

		@Override
		public void clear() {
			this.text = null;
		}

		public java.lang.String getText() {
			return this.text;
		}

		public hello_args setText(java.lang.String text) {
			this.text = text;
			return this;
		}

		public void unsetText() {
			this.text = null;
		}

		/** Returns true if field text is set (has been assigned a value) and false otherwise */
		public boolean isSetText() {
			return this.text != null;
		}

		public void setTextIsSet(boolean value) {
			if (!value) {
				this.text = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case TEXT:
				if (value == null) {
					unsetText();
				} else {
					setText((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case TEXT:
				return getText();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case TEXT:
				return isSetText();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof hello_args)
				return this.equals((hello_args) that);
			return false;
		}

		public boolean equals(hello_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_text = true && this.isSetText();
			boolean that_present_text = true && that.isSetText();
			if (this_present_text || that_present_text) {
				if (!(this_present_text && that_present_text))
					return false;
				if (!this.text.equals(that.text))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
			if (isSetText())
				hashCode = hashCode * 8191 + text.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(hello_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetText()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("hello_args(");
			boolean first = true;

			sb.append("text:");
			if (this.text == null) {
				sb.append("null");
			} else {
				sb.append(this.text);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class hello_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public hello_argsStandardScheme getScheme() {
				return new hello_argsStandardScheme();
			}
		}

		private static class hello_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hello_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, hello_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TEXT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.text = iprot.readString();
							struct.setTextIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, hello_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.text != null) {
					oprot.writeFieldBegin(TEXT_FIELD_DESC);
					oprot.writeString(struct.text);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class hello_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public hello_argsTupleScheme getScheme() {
				return new hello_argsTupleScheme();
			}
		}

		private static class hello_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hello_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetText()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetText()) {
					oprot.writeString(struct.text);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.text = iprot.readString();
					struct.setTextIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY)
					.getScheme();
		}
	}

	public static class hello_result
			implements org.apache.thrift.TBase<hello_result, hello_result._Fields>, java.io.Serializable, Cloneable, Comparable<hello_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
				org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hello_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hello_resultTupleSchemeFactory();

		public java.lang.String success; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_result.class, metaDataMap);
		}

		public hello_result() {
		}

		public hello_result(java.lang.String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public hello_result(hello_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public hello_result deepCopy() {
			return new hello_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public java.lang.String getSuccess() {
			return this.success;
		}

		public hello_result setSuccess(java.lang.String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof hello_result)
				return this.equals((hello_result) that);
			return false;
		}

		public boolean equals(hello_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(hello_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("hello_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class hello_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public hello_resultStandardScheme getScheme() {
				return new hello_resultStandardScheme();
			}
		}

		private static class hello_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hello_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, hello_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, hello_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class hello_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public hello_resultTupleScheme getScheme() {
				return new hello_resultTupleScheme();
			}
		}

		private static class hello_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hello_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY)
					.getScheme();
		}
	}

}
